"""
This file should support:
1. Running representation pretrain for X seeds, then adapt on an IL algo for Y seeds.
2. Grid search over different configurations
"""
import os.path as osp
from sacred import Experiment
from sacred.observers import FileStorageObserver
import ray
from ray import tune
from il_representations.scripts.run_rep_learner import represent_ex
from il_representations.scripts.il_train import il_train_ex
from utils import sacred_copy, update, detect_ec2

chain_ex = Experiment('chain', ingredients=[represent_ex, il_train_ex])
output_root = 'runs/chain_runs'


def run_exp(inner_ex_config, config, mode='rep'):
    """
    Combines experiment config and auto-generated Ray config, and runs an iteration of
    inner_ex on that combined config.

    :param inner_ex_config: The current values of inner experiment config, including
    any modifications we might have made in an macro_experiment config update
    :param config: Config generated by Ray tune
    :return:
    """
    from il_representations.scripts.run_rep_learner import represent_ex
    from il_representations.scripts.il_train import il_train_ex

    assert mode in ['rep', 'il'], 'Only support representation pretrain and il adapt'
    if mode == 'rep':
        inner_ex = represent_ex
    elif mode == 'il':
        inner_ex = il_train_ex

    inner_ex_dict = dict(inner_ex_config)
    merged_config = update(inner_ex_dict, config)
    observer = FileStorageObserver(osp.join(mode))
    inner_ex.observers.append(observer)
    ret_val = inner_ex.run(config_updates=merged_config)
    ray.tune.track.log(loss=ret_val.loss)
    ray.tune.track.log(model=ret_val.model)


@chain_ex.config
def base_config(representation_learning, il_train):
    exp_name = "grid_search"
    spec = {
        'rep': {
            'algo': tune.grid_search(['MoCo', 'SimCLR'])
        },
        'il': {
            'lr': tune.grid_search([0.01, 0.02])
        }
    }
    rep_ex_config = dict(representation_learning)
    il_ex_config = dict(il_train)


@chain_ex.main
def run(exp_name, spec, rep_ex_config, il_ex_config):
    rep_ex_config = sacred_copy(rep_ex_config)
    il_ex_config = sacred_copy(il_ex_config)
    spec = sacred_copy(spec)

    def trainable_function(config):
        run_exp(inner_ex_config, config, mode=mode)

    if detect_ec2():
        ray.init(address="auto")
    else:
        ray.init()

    mode = 'rep'
    inner_ex_config = rep_ex_config
    rep_run = tune.run(
        trainable_function,
        name=exp_name,
        config=spec['rep'],
    )

    # Get encoder info and pass for il train
    trials = rep_run.trials
    model_paths = [rep_run.get_trial_checkpoints_paths(trial, 'model') for trial in trials]

    mode = 'il'
    inner_ex_config = il_ex_config
    spec['il']['rep_paths'] = tune.grid_search(model_paths)
    il_run = tune.run(
        trainable_function,
        name=exp_name,
        config=spec['il'],
    )

    best_config = il_run.get_best_config(metric="accuracy")
    print(f"Best config is: {best_config}")
    print("Results available at: ")
    print(il_run._get_trial_paths())


def main():
    observer = FileStorageObserver('runs/chain_runs')
    chain_ex.observers.append(observer)
    chain_ex.run_commandline()


if __name__ == '__main__':
    main()
