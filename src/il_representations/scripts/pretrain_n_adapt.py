import copy
import os
import time
import os.path as osp
import numpy as np
import sacred
from sacred import Experiment
from sacred.observers import FileStorageObserver
import ray
from ray import tune
from il_representations.envs.config import benchmark_ingredient
from il_representations.scripts.run_rep_learner import represent_ex
from il_representations.scripts.il_train import il_train_ex
from il_representations.scripts.il_test import il_test_ex
from il_representations.scripts.utils import sacred_copy, update, detect_ec2

chain_ex = Experiment(
    'chain',
    ingredients=[
        # explicitly list every ingredient we want to configure
        represent_ex,
        il_train_ex,
        il_test_ex,
        benchmark_ingredient,
    ])
cwd = os.getcwd()


def run_single_exp(inner_ex_config, benchmark_config, tune_config_updates,
                   log_dir, exp_name):
    """
    Run a specified experiment. We could not pass each Sacred experiment in because they are not pickle serializable,
    which is not supported by Ray (when running this as a remote function).

    params:
        inner_ex_config: The current experiment's default config.
        config: The config generated by Ray tune for hyperparameter tuning
        log_dir: The log directory of current chain experiment.
        exp_name: Specify the experiment type in ['representation_learning', 'il_train', 'il_test']
    """
    sacred.SETTINGS['CAPTURE_MODE'] = 'sys'

    from il_representations.scripts.run_rep_learner import represent_ex
    from il_representations.scripts.il_train import il_train_ex
    from il_representations.scripts.il_test import il_test_ex

    if exp_name == 'representation_learning':
        inner_ex = represent_ex
    elif exp_name == 'il_train':
        inner_ex = il_train_ex
    elif exp_name == 'il_test':
        inner_ex = il_test_ex
    else:
        raise ValueError(f"cannot process exp type '{exp_name}'")

    inner_ex_dict = dict(inner_ex_config)
    # combine with benchmark config
    merged_config = update(inner_ex_dict, dict(benchmark=benchmark_config))
    # now combine with rest of config values, form Ray
    merged_config = update(merged_config, tune_config_updates[exp_name])
    merged_config = update(merged_config, dict(benchmark=tune_config_updates['benchmark']))
    observer = FileStorageObserver(osp.join(log_dir, exp_name))
    inner_ex.observers.append(observer)
    ret_val = inner_ex.run(config_updates=merged_config)
    return ret_val.result


def run_end2end_exp(rep_ex_config, il_train_ex_config, il_test_ex_config,
                    benchmark_config, config, log_dir):
    """
    Run representation learning, imitation learning's training and testing sequentially.

    Params:
        rep_ex_config: Config of represent_ex. It's the default config plus any modifications we might have made
                       in an macro_experiment config update.
        il_train_ex_config: Config of il_train_ex. It's the default config plus any modifications we might have made
                       in an macro_experiment config update.
        il_test_ex_config: Config of il_test_ex. It's the default config plus any modifications we might have made
                       in an macro_experiment config update.
        benchmark_config: Config of benchmark. Used for all experiments.
        config: The config generated by Ray tune for hyperparameter tuning
        log_dir: The log directory of current chain experiment.
    """
    # generate a new random seed
    # TODO(sam): use the same seed for different configs, but different seeds
    # within each repeat of a single config (to reduce variance)
    rng = np.random.RandomState()

    # copy config so that we don't mutate in-place
    tune_config_updates = copy.deepcopy(config)
    del config  # I want a new name for it

    # Run representation learning
    tune_config_updates['representation_learning'].update({
        'seed': rng.randint(1 << 31),
    })
    pretrain_result = run_single_exp(rep_ex_config, benchmark_config,
                                     tune_config_updates, log_dir,
                                     'representation_learning')

    # Run il train
    tune_config_updates['il_train'].update({
        'encoder_path': pretrain_result['encoder_path'],
        'seed': rng.randint(1 << 31),
    })
    il_train_result = run_single_exp(il_train_ex_config, benchmark_config,
                                     tune_config_updates, log_dir, 'il_train')

    # Run il test
    tune_config_updates['il_test'].update({
        'policy_path': il_train_result['model_path'],
        'seed': rng.randint(1 << 31),
    })
    il_test_result = run_single_exp(il_test_ex_config, benchmark_config,
                                    tune_config_updates, log_dir, 'il_test')
    filtered_result = {
        k: v
        for k, v in il_test_result.items() if isinstance(v, (int, float))
    }

    tune.report(**filtered_result)


@chain_ex.config
def base_config():
    exp_name = "grid_search"
    metric = "return_mean"  # anything returned by il_test is fair game
    spec = {
        'representation_learning': {
            'algo':
            tune.grid_search([
                'MoCoWithProjection',
                'SimCLR',
                'CEB',
                'ActionConditionedTemporalCPC',
            ]),
        },
        'il_train': {
            'algo': tune.grid_search(['bc']),
            'freeze_encoder': tune.grid_search([True, False])
        },
        'il_test': {},
        'benchmark':
        tune.grid_search(
            # MAGICAL configs
            [{
                'benchmark_name': 'magical',
                'magical_env_prefix': magical_env_name,
                'magical_remove_null_actions': True,
            } for magical_env_name in [
                'MoveToCorner',
                'MoveToRegion',
                'MatchRegions',
                'FixColour',
                'FindDupe',
                # 'MakeLine',
                # 'ClusterColour',
                # 'ClusterShape',
            ]]
            # # dm_control configs
            # +  # (+ on a separate line for ease of commenting-out)
            # [{
            #     'benchmark_name': 'dm_control',
            #     'dm_control_env': dm_control_env_name
            # } for dm_control_env_name in [
            #     'reacher-easy',
            #     'finger-spin',
            #     'cheetah-run',
            #     'walker-walk',
            #     'cartpole-swingup',
            #     'reacher-easy',
            #     'ball-in-cup-catch',
            # ]]
            # # ATARI configs (TODO)
            # +  # separate line for + again
            # [],
        )
    }

    # no updates, just leaving these in as a reminder that it's possible to
    # supply more updates to these parts in config files
    representation_learning = {}
    il_train = {}
    il_test = {}
    benchmark = {}

    tune_run_kwargs = dict(num_samples=1,
                           resources_per_trial=dict(
                               cpu=5,
                               gpu=0.32,
                           ))
    ray_init_kwargs = dict(
        memory=None,
        object_store_memory=None,
    )

    _ = locals()
    del _


@chain_ex.main
def run(exp_name, metric, spec, representation_learning, il_train, il_test,
        benchmark, tune_run_kwargs, ray_init_kwargs):
    rep_ex_config = sacred_copy(representation_learning)
    il_train_ex_config = sacred_copy(il_train)
    il_test_ex_config = sacred_copy(il_test)
    benchmark_config = sacred_copy(benchmark)
    spec = sacred_copy(spec)
    log_dir = os.path.abspath(chain_ex.observers[0].dir)

    # make Ray run from this directory
    ray_dir = os.path.join(log_dir)
    os.makedirs(ray_dir, exist_ok=True)
    # Ray Tune will change the directory when tuning; this next step ensures
    # that pwd-relative data_roots remain valid.
    benchmark_config['data_root'] = os.path.abspath(
        os.path.join(cwd, benchmark_config['data_root']))

    def trainable_function(config):
        # "config" is passed in by Ray Tune
        run_end2end_exp(rep_ex_config, il_train_ex_config, il_test_ex_config,
                        benchmark_config, config, log_dir)

    if detect_ec2():
        ray.init(address="auto", **ray_init_kwargs)
    else:
        ray.init(**ray_init_kwargs)

    rep_run = tune.run(
        trainable_function,
        name=exp_name,
        config=spec,
        local_dir=ray_dir,
        **tune_run_kwargs,
    )

    best_config = rep_run.get_best_config(metric=metric)
    print(f"Best config is: {best_config}")
    print("Results available at: ")
    print(rep_run._get_trial_paths())


def main():
    sacred.SETTINGS['CAPTURE_MODE'] = 'sys'
    observer = FileStorageObserver('runs/chain_runs')
    chain_ex.observers.append(observer)
    chain_ex.run_commandline()


if __name__ == '__main__':
    main()
