import copy
import enum
import logging
import os
import time
import os.path as osp
import numpy as np
import sacred
from sacred import Experiment
from sacred.observers import FileStorageObserver
import ray
from ray import tune
from il_representations.envs.config import benchmark_ingredient
from il_representations.scripts.run_rep_learner import represent_ex
from il_representations.scripts.il_train import il_train_ex
from il_representations.scripts.il_test import il_test_ex
from il_representations.scripts.utils import sacred_copy, update, detect_ec2

chain_ex = Experiment(
    'chain',
    ingredients=[
        # explicitly list every ingredient we want to configure
        represent_ex,
        il_train_ex,
        il_test_ex,
        benchmark_ingredient,
    ])
cwd = os.getcwd()


class StagesToRun(str, enum.Enum):
    """These enum flags are used to control whether the script tunes RepL, or
    IL, or both."""
    REPL_AND_IL = "REPL_AND_IL"
    ONLY_REPL = "REPL_ONLY"
    ONLY_IL = "IL_ONLY"


def get_stages_to_run(stages_to_run):
    """Convert a string (or enum) to StagesToRun object."""
    upper_str = stages_to_run.upper()
    try:
        stage = StagesToRun(upper_str)
    except ValueError as ex:
        options = [f"'{s.name}'" for s in StagesToRun]
        raise ValueError(
            f"Could not convert '{stages_to_run}' to StagesToRun ({ex}). "
            f"Available options are {', '.join(options)}")
    return stage


def run_single_exp(inner_ex_config, benchmark_config, tune_config_updates,
                   log_dir, exp_name):
    """
    Run a specified experiment. We could not pass each Sacred experiment in because they are not pickle serializable,
    which is not supported by Ray (when running this as a remote function).

    params:
        inner_ex_config: The current experiment's default config.
        config: The config generated by Ray tune for hyperparameter tuning
        log_dir: The log directory of current chain experiment.
        exp_name: Specify the experiment type in ['representation_learning', 'il_train', 'il_test']
    """
    sacred.SETTINGS['CAPTURE_MODE'] = 'sys'

    from il_representations.scripts.run_rep_learner import represent_ex
    from il_representations.scripts.il_train import il_train_ex
    from il_representations.scripts.il_test import il_test_ex

    if exp_name == 'representation_learning':
        inner_ex = represent_ex
    elif exp_name == 'il_train':
        inner_ex = il_train_ex
    elif exp_name == 'il_test':
        inner_ex = il_test_ex
    else:
        raise ValueError(f"cannot process exp type '{exp_name}'")

    inner_ex_dict = dict(inner_ex_config)
    # combine with benchmark config
    merged_config = update(inner_ex_dict, dict(benchmark=benchmark_config))
    # now combine with rest of config values, form Ray
    merged_config = update(merged_config, tune_config_updates[exp_name])
    merged_config = update(merged_config, dict(benchmark=tune_config_updates['benchmark']))
    observer = FileStorageObserver(osp.join(log_dir, exp_name))
    inner_ex.observers.append(observer)
    ret_val = inner_ex.run(config_updates=merged_config)
    return ret_val.result


def setup_run(config):
    """To be run before an experiment"""

    # generate a new random seed
    # TODO(sam): use the same seed for different configs, but different seeds
    # within each repeat of a single config (to reduce variance)
    rng = np.random.RandomState()

    # copy config so that we don't mutate in-place
    config = copy.deepcopy(config)

    return rng, config


def report_experiment_result(sacred_result):
    """To be run after an experiment."""

    filtered_result = {
        k: v
        for k, v in sacred_result.items() if isinstance(v, (int, float))
    }
    logging.info(
        f"Got sacred result with keys {', '.join(filtered_result.keys())}")
    tune.report(**filtered_result)


def run_end2end_exp(rep_ex_config, il_train_ex_config, il_test_ex_config,
                    benchmark_config, config, log_dir):
    """
    Run representation learning, imitation learning's training and testing sequentially.

    Params:
        rep_ex_config: Config of represent_ex. It's the default config plus any modifications we might have made
                       in an macro_experiment config update.
        il_train_ex_config: Config of il_train_ex. It's the default config plus any modifications we might have made
                       in an macro_experiment config update.
        il_test_ex_config: Config of il_test_ex. It's the default config plus any modifications we might have made
                       in an macro_experiment config update.
        benchmark_config: Config of benchmark. Used for all experiments.
        config: The config generated by Ray tune for hyperparameter tuning
        log_dir: The log directory of current chain experiment.
    """
    rng, tune_config_updates = setup_run(config)
    del config  # I want a new name for it

    # Run representation learning
    tune_config_updates['representation_learning'].update({
        'seed': rng.randint(1 << 31),
    })
    pretrain_result = run_single_exp(rep_ex_config, benchmark_config,
                                     tune_config_updates, log_dir,
                                     'representation_learning')

    # Run il train
    tune_config_updates['il_train'].update({
        'encoder_path': pretrain_result['encoder_path'],
        'seed': rng.randint(1 << 31),
    })
    il_train_result = run_single_exp(il_train_ex_config, benchmark_config,
                                     tune_config_updates, log_dir, 'il_train')

    # Run il test
    tune_config_updates['il_test'].update({
        'policy_path': il_train_result['model_path'],
        'seed': rng.randint(1 << 31),
    })
    il_test_result = run_single_exp(il_test_ex_config, benchmark_config,
                                    tune_config_updates, log_dir, 'il_test')

    report_experiment_result(il_test_result)


def run_repl_only_exp(rep_ex_config, benchmark_config, config, log_dir):
    """Experiment that runs only representation learning."""
    rng, tune_config_updates = setup_run(config)
    del config

    tune_config_updates['representation_learning'].update({
        'seed': rng.randint(1 << 31),
    })
    pretrain_result = run_single_exp(rep_ex_config, benchmark_config,
                                     tune_config_updates, log_dir,
                                     'representation_learning')
    report_experiment_result(pretrain_result)


def run_il_only_exp(il_train_ex_config, il_test_ex_config, benchmark_config,
                    config, log_dir):
    """Experiment that runs only imitation learning."""
    rng, tune_config_updates = setup_run(config)
    del config

    tune_config_updates['il_train'].update({'seed': rng.randint(1 << 31)})
    il_train_result = run_single_exp(il_train_ex_config, benchmark_config,
                                     tune_config_updates, log_dir, 'il_train')
    tune_config_updates['il_test'].update({
        'policy_path': il_train_result['model_path'],
        'seed': rng.randint(1 << 31),
    })
    il_test_result = run_single_exp(il_test_ex_config, benchmark_config,
                                    tune_config_updates, log_dir, 'il_test')
    report_experiment_result(il_test_result)


@chain_ex.config
def base_config():
    exp_name = "grid_search"
    # Name of the metric to optimise. By default, this will be automatically
    # selected based on the value of stages_to_run.
    metric = None
    spec = {
        'representation_learning': {
            'algo':
            tune.grid_search([
                'MoCoWithProjection',
                'SimCLR',
                'CEB',
                'ActionConditionedTemporalCPC',
            ]),
        },
        'il_train': {
            'algo': tune.grid_search(['bc']),
            'freeze_encoder': tune.grid_search([True, False])
        },
        'il_test': {},
        'benchmark':
        tune.grid_search(
            # MAGICAL configs
            [{
                'benchmark_name': 'magical',
                'magical_env_prefix': magical_env_name,
                'magical_remove_null_actions': True,
            } for magical_env_name in [
                'MoveToCorner',
                'MoveToRegion',
                'MatchRegions',
                'FixColour',
                'FindDupe',
                # 'MakeLine',
                # 'ClusterColour',
                # 'ClusterShape',
            ]]
            # # dm_control configs
            # +  # (+ on a separate line for ease of commenting-out)
            # [{
            #     'benchmark_name': 'dm_control',
            #     'dm_control_env': dm_control_env_name
            # } for dm_control_env_name in [
            #     'reacher-easy',
            #     'finger-spin',
            #     'cheetah-run',
            #     'walker-walk',
            #     'cartpole-swingup',
            #     'reacher-easy',
            #     'ball-in-cup-catch',
            # ]]
            # # ATARI configs (TODO)
            # +  # separate line for + again
            # [],
        )
    }

    # no updates, just leaving these in as a reminder that it's possible to
    # supply more updates to these parts in config files
    representation_learning = {}
    il_train = {}
    il_test = {}
    benchmark = {}
    stages_to_run = StagesToRun.REPL_AND_IL

    tune_run_kwargs = dict(num_samples=1,
                           resources_per_trial=dict(
                               cpu=5,
                               gpu=0.32,
                           ))
    ray_init_kwargs = dict(
        memory=None,
        object_store_memory=None,
        include_dashboard=False,
    )

    _ = locals()
    del _


@chain_ex.main
def run(exp_name, metric, spec, representation_learning, il_train, il_test,
        benchmark, tune_run_kwargs, ray_init_kwargs, stages_to_run):
    rep_ex_config = sacred_copy(representation_learning)
    il_train_ex_config = sacred_copy(il_train)
    il_test_ex_config = sacred_copy(il_test)
    benchmark_config = sacred_copy(benchmark)
    spec = sacred_copy(spec)
    stages_to_run = get_stages_to_run(stages_to_run)
    log_dir = os.path.abspath(chain_ex.observers[0].dir)

    if metric is None:
        # choose a default metric depending on whether we're running
        # representation learning, IL, or both
        metric = {
            # return_mean is returned by il_test.run()
            StagesToRun.REPL_AND_IL: 'return_mean',
            StagesToRun.ONLY_IL: 'return_mean',
            # repl_loss is returned by run_rep_learner.run()
            StagesToRun.ONLY_REPL: 'repl_loss',
        }[stages_to_run]

    # We remove unnecessary keys from the "spec" that we pass to Ray Tune. This
    # ensures that Ray Tune doesn't try to tune over things that can't affect
    # the outcome.
    if stages_to_run == StagesToRun.ONLY_IL \
       and 'representation_learning' in spec:
        logging.warn(
            "You only asked to tune IL, so I'm removing the representation "
            "learning config from the Tune spec."
        )
        del spec['representation_learning']

    if stages_to_run == StagesToRun.ONLY_REPL \
       and 'il_train' in spec:
        logging.warn(
            "You only asked to tune RepL, so I'm removing the imitation "
            "learning config from the Tune spec."
        )
        del spec['il_train']

    # make Ray run from this directory
    ray_dir = os.path.join(log_dir)
    os.makedirs(ray_dir, exist_ok=True)
    # Ray Tune will change the directory when tuning; this next step ensures
    # that pwd-relative data_roots remain valid.
    benchmark_config['data_root'] = os.path.abspath(
        os.path.join(cwd, benchmark_config['data_root']))

    def trainable_function(config):
        # "config" argument is passed in by Ray Tune
        if stages_to_run == StagesToRun.REPL_AND_IL:
            run_end2end_exp(rep_ex_config, il_train_ex_config,
                            il_test_ex_config, benchmark_config, config,
                            log_dir)
        if stages_to_run == StagesToRun.ONLY_IL:
            run_il_only_exp(il_train_ex_config, il_test_ex_config,
                            benchmark_config, config, log_dir)
        if stages_to_run == StagesToRun.ONLY_REPL:
            run_repl_only_exp(rep_ex_config, benchmark_config, config, log_dir)

    if detect_ec2():
        ray.init(address="auto", **ray_init_kwargs)
    else:
        ray.init(**ray_init_kwargs)

    rep_run = tune.run(
        trainable_function,
        name=exp_name,
        config=spec,
        local_dir=ray_dir,
        **tune_run_kwargs,
    )

    best_config = rep_run.get_best_config(metric=metric)
    logging.info(f"Best config is: {best_config}")
    logging.info("Results available at: ")
    logging.info(rep_run._get_trial_paths())


def main():
    sacred.SETTINGS['CAPTURE_MODE'] = 'sys'
    observer = FileStorageObserver('runs/chain_runs')
    chain_ex.observers.append(observer)
    chain_ex.run_commandline()


if __name__ == '__main__':
    main()
